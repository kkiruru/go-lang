#+TITLE: 슬라이스

* 인덱스 세는 법

인덱스 세는 방법은 참 헷깔리기 쉽습니다. 1부터 세는 언어도 있고, 0부터
세는 언어도 있습니다. 구간에서 시작 인덱스는 대부분 포함이 되지만 끝
인덱스는 포함이 되는 언어도 있고 되지 않는 언어도 있습니다.

인덱스 세는 방법을 제대로 익혀 두지 않고 그 때 그 때 실행해 보면서
+1이나 -1을 붙여서 해결하다보면 찾기 어려운 버그들을 만들어낼 가능성이
많습니다. 그렇기 때문에 신경을 좀 써야 합니다.

널리 사용되는 여러 인덱스 방법 중에 하나는 0부터 시작하고, 시작
인덱스에 있는 원소는 영역에 포함이 되지만, 끝 인덱스에 있는 원소는
영역에 포함이 되지 않습니다. 이렇게 생각해 보시면 이해가 빠를 수
있습니다.

#+BEGIN_SRC go
for i := start; i < end; i++ {
	fmt.Println(A[i])
}
#+END_SRC

0부터 시작하고 끝 인덱스가 영역에 포함이 안 되는 것은 여러가지 장점이
있습니다.

1. 길이를 잴 때 끝 인덱스에서 앞 인덱스를 빼면 된다는 점이
   간편합니다. 불필요하게 +1을 하지 않아도 됩니다.

   length := end - start

2. 1을 생각해 볼 때, 시작 인덱스와 길이를 알 때 단순히 둘을 더하면 끝
   인덱스가 나오므로 -1을 하지 않아도 되어서 수식이 더 간단해
   집니다. 영역이 start:start+length가 되는 거죠.

3. 영역을 나눌 때 편합니다. 0:n 구간을 m 등분 한다면 0:n/m, n/m:2*n/m,
   2*n/m:3*n/m ..., (m-1)*n/m:n과 같이 표현 가능합니다. 0:10을 3등분
   한다면 0:3, 3:6, 6:10이 됩니다. 식이 복잡해 보일 수 있지만 사실
   간단합니다. n개짜리 구간을 m 등분하면 하나당 길이는 n/m이므로 여기
   앞에 단순히 등분된 덩어리의 인덱스를 곱해서 구간을 맞추면
   됩니다. 아래 예제 코드로 써 봤습니다.

   https://play.golang.org/p/5pFksNksNQ

4. 두 구간이 서로 인접해 있는지 볼 때도 한 구간의 끝과 다른 구간의
   시작 인덱스가 같은지 비교하면 되는데 이게 +1이나 -1을 쓰는 것보다
   간단합니다.

5. 연속된 영역에서 중간 부분을 잘라서 제거해 낼 때도 편리합니다. 15:25
   구간에서 18:22 구간을 잘라내면 남는 부분은 15:18과 22:25이
   됩니다. 15:25 구간은 {15, 16, 17, 18, 19, 20, 21, 22, 23, 24}이고
   18:22구간은 {18, 19, 20, 21}이므로 이것을 뺀 구간은 {15, 16, 17,
   22, 23, 24}가 되므로 15:18과 22:25 구간이 됩니다.

   +1이나 -1이 여기저기 들어가야 되는 상황이면 복잡해지고 인덱스
   처리할 때 버그 발생 가능성도 높아집니다.

6. 직사각형 형태의 2차원 배열을 1차원으로 표현할 때도 계산이
   편해집니다.﻿

   n*m 행렬이라고 할 때 n*m개의 1차원 배열이나 슬라이스를 잡은 뒤에
   i행 j열에 있는 원소는 A[i*m+j]로 찾으면 됩니다. 예제 코드
   추가했습니다.

   https://play.golang.org/p/MH8wTpHCHi
